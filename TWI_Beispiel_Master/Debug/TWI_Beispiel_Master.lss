
TWI_Beispiel_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003dd  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ad  00000000  00000000  0000069d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000225  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  00000efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	6d d0       	rcall	.+218    	; 0x10e <main>
  34:	ab c0       	rjmp	.+342    	; 0x18c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <TWI_START>:
		if ( byte & (1<<bit) )
		UARTPutChar('1');
		else
		UARTPutChar('0');
	}
}
  38:	84 ea       	ldi	r24, 0xA4	; 164
  3a:	86 bf       	out	0x36, r24	; 54
  3c:	06 b6       	in	r0, 0x36	; 54
  3e:	07 fe       	sbrs	r0, 7
  40:	fd cf       	rjmp	.-6      	; 0x3c <TWI_START+0x4>
  42:	81 b1       	in	r24, 0x01	; 1
  44:	88 7f       	andi	r24, 0xF8	; 248
  46:	08 95       	ret

00000048 <TWI_SLA_R>:
  48:	81 e9       	ldi	r24, 0x91	; 145
  4a:	83 b9       	out	0x03, r24	; 3
  4c:	84 e8       	ldi	r24, 0x84	; 132
  4e:	86 bf       	out	0x36, r24	; 54
  50:	06 b6       	in	r0, 0x36	; 54
  52:	07 fe       	sbrs	r0, 7
  54:	fd cf       	rjmp	.-6      	; 0x50 <TWI_SLA_R+0x8>
  56:	81 b1       	in	r24, 0x01	; 1
  58:	88 7f       	andi	r24, 0xF8	; 248
  5a:	08 95       	ret

0000005c <TWI_SLA_W>:
  5c:	80 e9       	ldi	r24, 0x90	; 144
  5e:	83 b9       	out	0x03, r24	; 3
  60:	84 e8       	ldi	r24, 0x84	; 132
  62:	86 bf       	out	0x36, r24	; 54
  64:	06 b6       	in	r0, 0x36	; 54
  66:	07 fe       	sbrs	r0, 7
  68:	fd cf       	rjmp	.-6      	; 0x64 <TWI_SLA_W+0x8>
  6a:	81 b1       	in	r24, 0x01	; 1
  6c:	88 7f       	andi	r24, 0xF8	; 248
  6e:	08 95       	ret

00000070 <TWI_SEND_DATA>:
  70:	83 b9       	out	0x03, r24	; 3
  72:	84 e8       	ldi	r24, 0x84	; 132
  74:	86 bf       	out	0x36, r24	; 54
  76:	06 b6       	in	r0, 0x36	; 54
  78:	07 fe       	sbrs	r0, 7
  7a:	fd cf       	rjmp	.-6      	; 0x76 <TWI_SEND_DATA+0x6>
  7c:	81 b1       	in	r24, 0x01	; 1
  7e:	88 7f       	andi	r24, 0xF8	; 248
  80:	08 95       	ret

00000082 <TWI_RECV_ACK>:
  82:	84 ec       	ldi	r24, 0xC4	; 196
  84:	86 bf       	out	0x36, r24	; 54
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <TWI_RECV_ACK+0x4>
  8c:	83 b1       	in	r24, 0x03	; 3
  8e:	08 95       	ret

00000090 <TWI_RECV_NACK>:
  90:	84 e8       	ldi	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <TWI_RECV_NACK+0x4>
  9a:	83 b1       	in	r24, 0x03	; 3
  9c:	08 95       	ret

0000009e <UARTInit>:
  9e:	87 e1       	ldi	r24, 0x17	; 23
  a0:	89 b9       	out	0x09, r24	; 9
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
  aa:	08 95       	ret

000000ac <UARTPutChar>:
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <UARTPutChar>
  b0:	8c b9       	out	0x0c, r24	; 12
  b2:	08 95       	ret

000000b4 <UARTPutDecimal>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	d8 2f       	mov	r29, r24
  ba:	89 e2       	ldi	r24, 0x29	; 41
  bc:	d8 9f       	mul	r29, r24
  be:	81 2d       	mov	r24, r1
  c0:	11 24       	eor	r1, r1
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	80 5d       	subi	r24, 0xD0	; 208
  c8:	f1 df       	rcall	.-30     	; 0xac <UARTPutChar>
  ca:	9d ec       	ldi	r25, 0xCD	; 205
  cc:	d9 9f       	mul	r29, r25
  ce:	c1 2d       	mov	r28, r1
  d0:	11 24       	eor	r1, r1
  d2:	c6 95       	lsr	r28
  d4:	c6 95       	lsr	r28
  d6:	c6 95       	lsr	r28
  d8:	c9 9f       	mul	r28, r25
  da:	91 2d       	mov	r25, r1
  dc:	11 24       	eor	r1, r1
  de:	96 95       	lsr	r25
  e0:	96 95       	lsr	r25
  e2:	96 95       	lsr	r25
  e4:	99 0f       	add	r25, r25
  e6:	89 2f       	mov	r24, r25
  e8:	88 0f       	add	r24, r24
  ea:	88 0f       	add	r24, r24
  ec:	98 0f       	add	r25, r24
  ee:	8c 2f       	mov	r24, r28
  f0:	89 1b       	sub	r24, r25
  f2:	80 5d       	subi	r24, 0xD0	; 208
  f4:	db df       	rcall	.-74     	; 0xac <UARTPutChar>
  f6:	cc 0f       	add	r28, r28
  f8:	8c 2f       	mov	r24, r28
  fa:	88 0f       	add	r24, r24
  fc:	88 0f       	add	r24, r24
  fe:	c8 0f       	add	r28, r24
 100:	8d 2f       	mov	r24, r29
 102:	8c 1b       	sub	r24, r28
 104:	80 5d       	subi	r24, 0xD0	; 208
 106:	d2 df       	rcall	.-92     	; 0xac <UARTPutChar>
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	uint8_t tempHighByte, tempLowByte;

	DDRD |= (1<<PD2)|(1<<PD3)|(1<<PD4);	// PD2-4 zur Ausgabe (LED0-2)
 10e:	81 b3       	in	r24, 0x11	; 17
 110:	8c 61       	ori	r24, 0x1C	; 28
 112:	81 bb       	out	0x11, r24	; 17
	//PORTC|= (1<<PC4)|(1<<PC5);		// Pullup für SDA und SCL

	TWBR=0x0A;					// Bitratenregister laden
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	80 b9       	out	0x00, r24	; 0
	TWSR=0x00;					// Vorteiler=1
 118:	11 b8       	out	0x01, r1	; 1
	
	UARTInit();
 11a:	c1 df       	rcall	.-126    	; 0x9e <UARTInit>
		if(TWI_SLA_R()!=0x40) PORTD|=(1<<PD2);			// SLA+R senden (0x90)
		
		tempHighByte = TWI_RECV_ACK();					// Temperatur High-Byte
		tempLowByte  = TWI_RECV_NACK();					// Temperatur Low-Byte

		TWCR=0b10010100;								// TWINT=1, TWSTO=1, TWEN=1
 11c:	04 e9       	ldi	r16, 0x94	; 148
		}
		//UARTPutChar(0x0D);
		UARTPutChar(0x0A);
		
		_delay_ms(1000);
		PORTD^=(1<<PD4);
 11e:	10 e1       	ldi	r17, 0x10	; 16
	
	UARTInit();

	while (1)
	{
		if(TWI_START()!=0x08) PORTD|=(1<<PD2);			// Start senden
 120:	8b df       	rcall	.-234    	; 0x38 <TWI_START>
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	09 f0       	breq	.+2      	; 0x128 <main+0x1a>
 126:	92 9a       	sbi	0x12, 2	; 18
		if(TWI_SLA_W()!=0x18) PORTD|=(1<<PD2);			// SLA+W senden (0x90)
 128:	99 df       	rcall	.-206    	; 0x5c <TWI_SLA_W>
 12a:	88 31       	cpi	r24, 0x18	; 24
 12c:	09 f0       	breq	.+2      	; 0x130 <main+0x22>
 12e:	92 9a       	sbi	0x12, 2	; 18
		if(TWI_SEND_DATA(0x00)!=0x28) PORTD|=(1<<PD2);	// Send  TEMP_REGISTER
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	9e df       	rcall	.-196    	; 0x70 <TWI_SEND_DATA>
 134:	88 32       	cpi	r24, 0x28	; 40
 136:	09 f0       	breq	.+2      	; 0x13a <main+0x2c>
 138:	92 9a       	sbi	0x12, 2	; 18
		
		if(TWI_START()!=0x10) PORTD|=(1<<PD2);			// Restart senden
 13a:	7e df       	rcall	.-260    	; 0x38 <TWI_START>
 13c:	80 31       	cpi	r24, 0x10	; 16
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0x34>
 140:	92 9a       	sbi	0x12, 2	; 18
		if(TWI_SLA_R()!=0x40) PORTD|=(1<<PD2);			// SLA+R senden (0x90)
 142:	82 df       	rcall	.-252    	; 0x48 <TWI_SLA_R>
 144:	80 34       	cpi	r24, 0x40	; 64
 146:	09 f0       	breq	.+2      	; 0x14a <main+0x3c>
 148:	92 9a       	sbi	0x12, 2	; 18
		
		tempHighByte = TWI_RECV_ACK();					// Temperatur High-Byte
 14a:	9b df       	rcall	.-202    	; 0x82 <TWI_RECV_ACK>
 14c:	d8 2f       	mov	r29, r24
		tempLowByte  = TWI_RECV_NACK();					// Temperatur Low-Byte
 14e:	a0 df       	rcall	.-192    	; 0x90 <TWI_RECV_NACK>
 150:	c8 2f       	mov	r28, r24

		TWCR=0b10010100;								// TWINT=1, TWSTO=1, TWEN=1
 152:	06 bf       	out	0x36, r16	; 54
		
		UARTPutDecimal(tempHighByte);
 154:	8d 2f       	mov	r24, r29
 156:	ae df       	rcall	.-164    	; 0xb4 <UARTPutDecimal>
		if (tempLowByte&0x80) {
 158:	cc 23       	and	r28, r28
 15a:	2c f4       	brge	.+10     	; 0x166 <main+0x58>
			UARTPutChar(0x2e);
 15c:	8e e2       	ldi	r24, 0x2E	; 46
 15e:	a6 df       	rcall	.-180    	; 0xac <UARTPutChar>
			UARTPutChar(0x35);
 160:	85 e3       	ldi	r24, 0x35	; 53
 162:	a4 df       	rcall	.-184    	; 0xac <UARTPutChar>
 164:	04 c0       	rjmp	.+8      	; 0x16e <main+0x60>
		} else
		{
			UARTPutChar(0x2e);
 166:	8e e2       	ldi	r24, 0x2E	; 46
 168:	a1 df       	rcall	.-190    	; 0xac <UARTPutChar>
			UARTPutChar(0x30);
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	9f df       	rcall	.-194    	; 0xac <UARTPutChar>
		}
		//UARTPutChar(0x0D);
		UARTPutChar(0x0A);
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	9d df       	rcall	.-198    	; 0xac <UARTPutChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x6a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x74>
 182:	00 00       	nop
		
		_delay_ms(1000);
		PORTD^=(1<<PD4);
 184:	82 b3       	in	r24, 0x12	; 18
 186:	81 27       	eor	r24, r17
 188:	82 bb       	out	0x12, r24	; 18
	}
 18a:	ca cf       	rjmp	.-108    	; 0x120 <main+0x12>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
